---
import Layout from '../../layouts/Layout.astro'
import Subheading from '../../components/Subheading.astro'
import Input from '../../components/Input.astro'
import Button from '../../components/Button.astro'
import { Eraser, UserPlus2, X } from 'lucide-astro'
---

<Layout
  title="check splitter"
  description="Calculate how to split your checks!"
>
  <p class="mb-4">
    A tool to calculate how much individuals pay (including tax & tip!) when
    splitting a check!
  </p>

  <form id="formA">
    <label class="mb-3 block">
      Individual Subtotal ($) - accepts math expressions
      <Input id="indSubtotal" type="text" placeholder="ex: 1.00 + 1.50*3" />
      <span id="indExprErrorMsg" class="mt-1 text-red-500"></span>
    </label>

    <label class="my-3 block">
      Check Subtotal ($)
      <Input
        type="number"
        id="checkSubtotal"
        placeholder="0.00"
        step=".01"
        min="0"
      />
    </label>

    <label class="my-3 block">
      Check Tax + Tip ($) - accepts math expr.
      <Input id="taxTip" type="text" placeholder="0.00" />
      <span id="taxTipExprErrorMsg" class="mt-1 text-red-500"></span>
    </label>

    <div>
      <Subheading class="mt-5">Result</Subheading>
      <span class="me-2">Individual's Total Share:</span>$<span id="totalShare"
        >0.00</span
      >
      <br />
      <i class="me-2">Breakdown (subtotal + tax/tip):</i>
      <span id="breakdown">
        $<span id="subtotalShare">0.00</span> + $<span id="taxTipShare"
          >0.00</span
        >
      </span>
    </div>
  </form>

  <Button
    id="clearBtn"
    class="me-4 mt-3 bg-purple-600 font-bold hover:bg-purple-700"
    type="button"
  >
    <Eraser class="me-1 inline w-5 align-top" />
     Clear inputs
  </Button>

  <Button
    id="addBtn"
    class="mt-3 bg-green-600 font-bold hover:bg-green-700"
    type="button"
  >
    <UserPlus2 class="me-1 inline align-top" />
     Track in table
  </Button>

  <hr class="my-4" />

  <!-- Share table -->
  <Subheading class="mb-2 mt-5">Share table</Subheading>
  <table class="mb-3 w-full table-auto border-collapse text-sm md:text-base">
    <thead class="bg-slate-800">
      <tr>
        <th class="border-b border-slate-500 px-2 py-3 text-left md:px-4"
          >Name</th
        >
        <th class="border-b border-slate-500 px-2 py-3 text-left md:px-4"
          >Share</th
        >
        <th class="border-b border-slate-500 px-2 py-3 text-left italic md:px-4"
          >Breakdown</th
        >
        <th class="border-b border-slate-500"></th>
      </tr>
    </thead>
    <tbody>
      <!-- Template row -->
      <tr class="hidden">
        <td class="border-b border-slate-600 p-2 md:p-4">
          <input
            type="text"
            data-id="name"
            placeholder="Enter name"
            class="w-24 border-0 bg-primary p-0 text-sm text-white placeholder:text-slate-400 focus:ring-blue-200 md:w-48 md:text-base"
          />
        </td>
        <td class="border-b border-slate-600 p-2 md:p-4">
          $<span data-id="share">0.00</span>
        </td>
        <td class="border-b border-slate-600 p-2 md:p-4">
          <span data-id="breakdown"></span>
        </td>
        <td class="border-b border-slate-600 pe-2">
          <div class="flex justify-end">
            <button data-id="removeBtn" tabindex="-1"
              ><X class="text-red-200" /></button
            >
          </div>
        </td>
      </tr>
    </tbody>
  </table>

  <details open={true}>
    <summary class="border-b border-blue-100 font-bold">Details</summary>
    <b>Sum of shares:</b> $<span id="shareSum">0.00</span>
  </details>

  <hr class="my-4" />

  <!-- Upcoming features -->
  <h2 class="text-xl font-semibold text-emerald-300">Upcoming features</h2>
  <ul class="list-inside list-disc">
    <li>Calculating & displaying individuals' subtotal share percentages</li>
  </ul>
</Layout>

<script>
  import * as math from 'mathjs'

  /// CONSTANTS
  const form = document.querySelector<HTMLFormElement>('#formA')
  const inputs = Array.from(form!.getElementsByTagName('input'))

  // Input elements
  const indSubtotalInput =
    document.querySelector<HTMLInputElement>('#indSubtotal')
  const subtotalInput =
    document.querySelector<HTMLInputElement>('#checkSubtotal')
  const taxTipInput = document.querySelector<HTMLInputElement>('#taxTip')

  // Elements
  const totalShareElement = document.getElementById('totalShare')
  const indExprErrorMsg = document.getElementById('indExprErrorMsg')
  const taxTipExprErrorMsg = document.getElementById('taxTipExprErrorMsg')
  const clearBtn = document.getElementById('clearBtn')

  /// FUNCTIONS
  function parseInput(input: string) {
    if (!math.hasNumericValue(input)) {
      return false
    }

    return math.round(math.number(input), 2)
  }

  /**
   * Calculates an individual's share to a check then editing the value on the page.
   *
   * Via event listener, this function is run upon any change to the form's inputs.
   */
  function calcIndShare() {
    if (
      !form ||
      !subtotalInput ||
      !indSubtotalInput ||
      !taxTipInput ||
      !indExprErrorMsg ||
      !taxTipExprErrorMsg ||
      !totalShareElement
    )
      return

    let subtotal = parseInput(subtotalInput.value) || 1

    // Calculate individual subtotal
    let indSubtotal: number
    try {
      indSubtotal = math.evaluate(indSubtotalInput.value) || 0
      indExprErrorMsg.textContent = ''
    } catch (error) {
      indExprErrorMsg.textContent = '❗ Invalid arithmetic expression!'
      return
    }

    // Calculate tax
    let taxTip: number
    try {
      taxTip = math.evaluate(taxTipInput.value) || 0
      taxTipExprErrorMsg.textContent = ''
    } catch (error) {
      taxTipExprErrorMsg.textContent = '❗ Invalid arithmetic expression!'
      return
    }

    // Calculate subshares
    const taxTipShare = (indSubtotal / subtotal) * taxTip
    let totalShare = taxTipShare + indSubtotal

    document.getElementById('subtotalShare')!.textContent =
      indSubtotal.toFixed(2)
    document.getElementById('taxTipShare')!.textContent = taxTipShare.toFixed(2)

    // Update individual share
    totalShareElement.textContent = totalShare.toFixed(2)
  }

  /// INITIALIZATION
  // Activate form calculation functionality
  form!.addEventListener('input', calcIndShare)

  // Activate clear button
  clearBtn!.addEventListener('click', () => {
    inputs.forEach((input) => {
      input.value = ''
    })
    totalShareElement!.textContent = '0.00'
  })

  /// SHARE TABLE
  const addBtn = document.getElementById('addBtn')
  const tableBody = document.querySelector('tbody')
  const shareSumElement = document.getElementById('shareSum')
  let shareSum = 0

  addBtn?.addEventListener('click', () => {
    const newRow = tableBody?.firstElementChild?.cloneNode(true)
    if (!(newRow instanceof HTMLTableRowElement)) {
      return
    }
    newRow.classList.remove('hidden')

    const name = newRow?.querySelector<HTMLInputElement>('[data-id="name"]')
    name!.value = ''

    const share = newRow?.querySelector('[data-id="share"]')
    share!.textContent = totalShareElement!.textContent
    shareSum += Number(share?.textContent)

    const breakdown = newRow?.querySelector('[data-id="breakdown"]')
    breakdown!.textContent = document.querySelector('#breakdown')!.textContent

    const removeBtn = newRow?.querySelector('[data-id="removeBtn"]')
    removeBtn?.addEventListener('click', () => {
      // Recalculate sum of shares
      shareSum -= Number(share?.textContent)

      tableBody?.removeChild(newRow)
      shareSumElement!.textContent = shareSum.toFixed(2)
    })

    // Recalculate sum of shares
    shareSumElement!.textContent = shareSum.toFixed(2)

    // Add row to table
    tableBody?.appendChild(newRow)
  })
</script>

<script></script>
